name: NanoPi R4S Rebuild

on: 
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master

jobs:
  build_openwrt:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    outputs:
      OPENWRTROOT: ${{ steps.update.outputs.OPENWRTROOT }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev python3-setuptools python3-pyelftools python3-mako libfuse-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          df -h

      - name: Clone Source Code
        run: |
          git config --global user.email "jasontsang.dev@gmail.com"
          git config --global user.name "Jason Tsang"
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
          echo "::set-output name=OPENWRTROOT::$(echo $PWD)"

      - name: Update feeds
        run: |
          cd $OPENWRTROOT
          sed -i '$a src-git video https://github.com/openwrt/video' feeds.conf.default
          sed -i '$a src-git kenzo https://github.com/kenzok8/openwrt-packages' feeds.conf.default
          sed -i '$a src-git small https://github.com/kenzok8/small' feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: DIY
        env:
            AUTHORIZATION: ${{ secrets.AUTHORIZATION }}
        run: |
          cd $OPENWRTROOT
          sed -i '/\$(Package\/ariang\/install)/d' package/feeds/packages/ariang/Makefile
          sed -i 's/192.168.1.1/192.168.2.1/g' package/base-files/files/bin/config_generate

          svn co https://github.com/kiddin9/openwrt-packages/trunk/luci-app-gowebdav package/lean/luci-app-gowebdav
          svn co https://github.com/kiddin9/openwrt-packages/trunk/gowebdav package/lean/gowebdav

          mkdir -p files/root
          pushd files/root
          git clone https://github.com/robbyrussell/oh-my-zsh .oh-my-zsh
          git clone https://github.com/zsh-users/zsh-autosuggestions .oh-my-zsh/custom/plugins/zsh-autosuggestions
          git clone https://github.com/zsh-users/zsh-syntax-highlighting.git .oh-my-zsh/custom/plugins/zsh-syntax-highlighting
          git clone https://github.com/zsh-users/zsh-completions .oh-my-zsh/custom/plugins/zsh-completions
          cp .oh-my-zsh/templates/zshrc.zsh-template .zshrc
          sed -i 's/plugins=(git)/plugins=(git command-not-found extract z docker zsh-syntax-highlighting zsh-autosuggestions zsh-completions)/g' .zshrc
          popd

          mkdir -p files/etc/opkg
          cp ../distfeeds.conf files/etc/opkg/distfeeds.conf
          
          cp ../init-settings.sh files/root/init-settings.sh
          mkdir -p files/etc
          cp ../rc.local files/etc/rc.local
          
          
          mkdir -p files/etc/config
          pushd files/etc/config
          curl -H "Authorization: $AUTHORIZATION" https://file.jasontsang.dev:4096/Download/archive/NanoPi-R4S-Rebuild/etc/config/fstab > fstab
          popd
          
          mkdir -p files/root/my-defaults
          pushd files/root/my-defaults
          curl -H "Authorization: $AUTHORIZATION" https://file.jasontsang.dev:4096/Download/archive/NanoPi-R4S-Rebuild/init-settings.sh > 99-init-settings
          popd

      - name: Generate configuration file
        run: |
          cd $OPENWRTROOT
          cp ../.config .config
          make defconfig

      - name: Make download
        run: |
          cd $OPENWRTROOT
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          cd $OPENWRTROOT
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          cd $OPENWRTROOT
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_buildinfo
          path: ./openwrt/artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_package
          path: ./openwrt/artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_firmware
          path: ./openwrt/bin/targets/

      - name: Generate release tag
        id: tag
        run: |
          echo "::set-output name=release_date::$(date +"%Y.%m.%d")"

      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.ACCESS_TOKEN }}
          file: ./openwrt/artifact/firmware/*
          tag: ${{ steps.tag.outputs.release_date }}
          release_name: ${{ steps.tag.outputs.release_date }} NanoPi-R4S-Rebuild
          file_glob: true
